-- Find the total sales across all orders
SELECT 
SUM(Sales) TotalSales
FROM Sales.Orders

-- Find the total sales for each product
SELECT 
ProductID,
SUM(Sales) TotalSales
FROM Sales.Orders
GROUP BY ProductID

-- Find the total sales for each product, additionally provide details such order id, order date
SELECT 
	OrderID,
	OrderDate,
	ProductId,
	SUM(Sales) OVER (PARTITION BY ProductID) TotalSalesByProducts
FROM Sales.Orders

-- Find the total sales across all orders, additionally provide details such as order id, order date
SELECT 
	OrderID,
	OrderDate,
	ProductId,
	SUM(Sales) OVER () TotalSales
FROM Sales.Orders

--  Find the total sales across all orders, 
--  Find the total sales for each product,
--  Find the total sales for each combination of product and order status
--  Aadditionally provide details such order id, order date
SELECT 
	OrderID,
	OrderDate,
	ProductID,
	Sales,
	OrderStatus,
	SUM(Sales) OVER () TotalSales,
	SUM(Sales) OVER (PARTITION BY ProductID) TotalSalesByProducts,
	SUM(Sales) OVER (PARTITION BY ProductID, OrderStatus) TotalSalesByProductsAndStatus

FROM Sales.Orders


-- Rank each order based on their sales from highest to lowest
-- additionally provide details such as order Id , order date
SELECT
	OrderID,
	OrderDate,
	Sales
FROM Sales.Orders
Order BY Sales DESC


SELECT
	OrderID,
	OrderDate,
	Sales,
	RANK() OVER (ORDER BY Sales DESC) RankSales
FROM Sales.Orders



SELECT
	OrderID,
	OrderDate,
	OrderStatus,
	Sales,
	SUM(Sales)OVER(PARTITION BY OrderStatus ORDER BY OrderDate ROWS 2 PRECEDING) TotalSales
FROM Sales.Orders


-- Rank customers based on their total sales
SELECT
CustomerID,
SUM(Sales) TotalSales,
RANK()OVER(ORDER BY SUM(Sales) DESC) RankSales
FROM Sales.Orders
GROUP BY CustomerID



-- find the total number of orders
-- find the total number of orders for each customer
-- additionally provide details such as order id & order date
SELECT 
OrderID,
OrderDate,
CustomerID,
COUNT(*) OVER() TotalOrders,
COUNT(*) OVER(PARTITION BY CustomerID) OrdersByCustomers
FROM Sales.Orders

-- Find the total number of customers
-- find the total number of scores
-- additionally provide all customer details
SELECT 
*,
COUNT(*)OVER() TotalCustomers,
COUNT(Score)OVER() TotalScores,
COUNT(Country)OVER() TotalCountry
FROM Sales.Customers

-- Check whether the table 'Orders' contrains any duplicate rows
SELECT
*
FROM(
	SELECT
	OrderID,
	COUNT(*) OVER (PARTITION BY OrderID) CheckPK
	FROM Sales.OrdersArchive
) T
WHERE CheckPK > 1

-- Find the total sales across all orders
-- and the total sales for each product
-- additionally provide details such as order ID, order date

SELECT
	OrderID,
	OrderDate,
	ProductID,
	SUM(Sales)OVER() TotalSales,
	SUM(Sales)OVER(PARTITION BY ProductID) SalesByProduct
FROM Sales.Orders

-- Find the percentage contrbution of each product's sales to the total sales
SELECT
	OrderID,
	ProductID,
	Sales,
	SUM(Sales)OVER(PARTITION BY ProductID) SalesByProduct,
	SUM(Sales)OVER() TotalSales,
	CONCAT(ROUND(CAST(Sales AS float)*100/SUM(Sales)OVER(),2), '%') PercentageOfTotal,
	CONCAT(ROUND(CAST(SUM(Sales)OVER(PARTITION BY ProductID) AS float)*100/SUM(Sales)OVER(),2),'%') Percentage
FROM Sales.Orders

-- Find the average sales across all orders
-- and find the average sales for each product
-- additionally provide details usch as order ID and order date
SELECT
	OrderID,
	OrderDate,
	ProductID,
	Sales,
	AVG(Sales)OVER() avg_sales_orders,
	AVG(Sales)OVER(PARTITION BY ProductID) avg_sales_products
FROM Sales.Orders


-- find the average scores of customers
-- additionally provide details such CustomerID AND Last name

SELECT
	CustomerID,
	LastName,
	Score,
	AVG(Score) OVER () AvgScore,
	AVG(COALESCE(Score,0)) OVER () AvgScoreWithoutNull
FROM Sales.Customers

-- find all orders where sales are higher than the average sales across all orders

SELECT
	*
FROM (
SELECT 
	OrderID,
	OrderDate,
	Sales,
	AVG(Sales)OVER() AvgSales
FROM Sales.Orders
)T
WHERE Sales > AvgSales

-- Find the highest and lowest sales of all orders
-- Find the highest and lowest sales for each product
-- additionally  provide details such order ID ,ORDER DATE

SELECT 
OrderID,
OrderDate,
ProductID,
Sales,
MAX(Sales)OVER() HighestSales,
MIN(Sales)OVER() LowestSales,
MAX(Sales)OVER(PARTITION BY ProductID) HighestSalesByProduct,
MIN(Sales)OVER(PARTITION BY ProductID) LowestSalesByProduct
FROM Sales.Orders

-- Show the employess who have the hightest salaries
SELECT
*
FROM(
	SELECT 
	*,
	MAX(Salary)OVER() HighestSalary
	FROM Sales.Employees
)t
WHERE Salary = HighestSalary

-- Find the deviation of each sales from the minimum and maximum sales amounts

SELECT 
OrderID,
OrderDate,
ProductID,
Sales,
MAX(Sales)OVER() HighestSales,
MIN(Sales)OVER() LowestSales,
Sales - MIN(Sales)OVER() DeviationFromMin,
MAX(Sales)OVER()-Sales DeviationFromMax
FROM Sales.Orders

-- calculate moving average of sales for each product over time
-- calculate moving average of sales for each product over time, including only the next order
SELECT 
OrderID,
ProductID,
OrderDate,
Sales,
AVG(Sales)OVER(PARTITION BY ProductID) AvgSalesByProduct,
AVG(Sales)OVER(PARTITION BY ProductID ORDER BY OrderDate) MovingAvgSalesByProduct,
AVG(Sales)OVER(PARTITION BY ProductID ORDER BY OrderDate ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING ) RollingAvgSalesByProduct
FROM Sales.Orders


